package com.unihannover.gamedev.models;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.Table;

import java.io.Serializable;

/**
 * Represents an achievement
 */
public class Achievement implements Model{

	/**
	 * Required for composite primary keys
	 */
	public static class AchievementPK implements Serializable {
		protected String id;
		protected String collectorId;


		public AchievementPK() {}

		public AchievementPK(String id, String collectorId) {
			this.id = id;
			this.collectorId = collectorId;
		}

		// equals, hashCode ?!
	}

    private String id = "";
    private String collectorId = "0";
    private String name = "TestAchievement";
    private String description = "Simple test achievement";
    private float value = 0;

    /*
    Der int type hat folgende Funktion:

    Um den Teil der Achievement-Logik möglichst allgemein und auswechselbar zu machen steht der int für den
    Achievement Typen. Also 0 wäre z.B. ein Commit Achievement und 1 ein Merge Achievement usw.

    (Wird aus der Achievement Config geladen)
     */

    private int type = 0;

    /*
    Der String key hat folgende Funktion:

    Man kann dem Achievement auch einen spezifischen Key geben auf den dann geachtet wird.
    Zum Beispiel "Time". Also würde man bei einem Hook, der einen Commit enthält
    Achievements vom Typ 0 updaten und falls ein key in dem Achievement existiert,
    dann wird dieser key in dem Hook gesucht.
     */

    private String[] keys;

    /*
    Der int repititions steht für die Anzahl an Wiederholungen, die dafür nötig sind, um ein Achievement
    zu komplettieren.
     */

    private int repititions = 1;

	public Achievement(){}
    public Achievement(String id, String name, String description, Float value, String collectorId){
    	this.id = id;
    	this.name = name;
    	this.description = description;
    	this.value = value;
    	this.collectorId = collectorId;
	}


	// *** Autogenerated Setters & Getters ***

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public String getCollectorId() {
		return collectorId;
	}

	public void setCollectorId(String collectorId) {
		this.collectorId = collectorId;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public float getValue() {
		return value;
	}

	public void setValue(float value) {
		this.value = value;
	}



	public String toJSON()
	{
		StringBuilder json = new StringBuilder();
		json.append("{");
		json.append("\"collectorId\":  " + "\"" + collectorId + "\"" + ",");
		json.append("\"description\":  " + "\"" + description + "\"" + ",");
		json.append("\"id\": " + "\"" + id + "\"" + ",");
		json.append("\"name\": " + "\"" + name + "\"" + ",");
		json.append("\"value\": " + value);
		json.append("}");
		return json.toString();
	}

}
